# GitHub Actions workflow to create AWS resources for SES Lambda
# Author: Nyah Check

name: Terraform

on:
  push:
    branches: [ master ]


jobs:
  terraform-infra-provision:
    name: "Terraform"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          rust-version: stable
      - name: Build for release
        run: |
          cargo build -p lambda_runtime --example privatemail --release
          cp ./target/release/examples/privatemail ./bootstrap && zip lambda.zip bootstrap && rm bootstrap
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -chdir=terraform
      - name: Terraform Validate
        id: validate
        run: terraform validate -json -chdir=terraform
      - name: Terraform init
        id: init
        run: terraform init -chdir=terraform
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -chdir=terraform
        continue-on-error: true
      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`${process.env.PLAN}\`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      - name: Terraform Apply
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: terraform apply -auto-approve -chdir=terraform
